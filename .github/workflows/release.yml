name: Release

on:
    push:
        tags:
            - "v*"
    workflow_dispatch:

permissions:
    contents: write

jobs:
    build:
        name: Build - ${{ matrix.platform.os }} (${{ matrix.platform.target }})
        runs-on: ${{ matrix.platform.os }}
        strategy:
            matrix:
                platform:
                    # Linux
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      name: Linux-x86_64
                    - os: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      name: Linux-aarch64

                    # macOS
                    - os: macos-latest
                      target: x86_64-apple-darwin
                      name: Darwin-x86_64
                    - os: macos-latest
                      target: aarch64-apple-darwin
                      name: Darwin-aarch64

                    # Windows
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      name: Windows-x86_64
                      ext: .exe

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.platform.target }}

            - name: Setup cross-compilation (Linux ARM)
              if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gcc-aarch64-linux-gnu

            - name: Configure linker (Linux ARM)
              if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
              run: |
                  echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
                  echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml

            - name: Build
              env:
                  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
              run: cargo build --release --target ${{ matrix.platform.target }} --features bundled

            - name: Prepare binary
              shell: bash
              run: |
                  cd target/${{ matrix.platform.target }}/release
                  binary_name="qnote${{ matrix.platform.ext }}"
                  release_name="qnote-${{ matrix.platform.name }}${{ matrix.platform.ext }}"

                  if [ -f "$binary_name" ]; then
                    mv "$binary_name" "../../../$release_name"
                  else
                    echo "Error: Binary not found: $binary_name"
                    exit 1
                  fi

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: qnote-${{ matrix.platform.name }}
                  path: qnote-${{ matrix.platform.name }}${{ matrix.platform.ext }}

    release:
        name: Create Release
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Download artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Prepare release artifacts
              run: |
                  mkdir -p release
                  find artifacts -type f -name 'qnote-*' -exec mv {} release/ \;
                  ls -lh release/

            - name: Create checksums
              run: |
                  cd release
                  sha256sum qnote-* > SHA256SUMS
                  cat SHA256SUMS

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  files: release/*
                  draft: false
                  prerelease: false
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
